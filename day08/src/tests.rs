use super::*;

#[test]
fn can_get_char_coords() {
    let input = "..........
..........
..........
....a.....
..........
.....a....
..........
..........
..........
..........";
    let grid = make_grid(input);

    let char_coords = get_char_coords(&grid);

    let expected: Vec<((i64, i64), &char)> = vec![((3, 4), &'a'), ((5, 5), &'a')];
    assert_eq!(char_coords, expected);
}

#[test]
fn can_count_antinodes() {
    let input = "..........
..........
..........
....a.....
..........
.....a....
..........
..........
..........
..........";
    let count = count_antinodes(&input);
    assert_eq!(count, 2);
}

#[test]
fn can_count_antinodes_2() {
    let input = "..........
..........
..........
....a.....
........a.
.....a....
..........
......A...
..........
..........";
    let count = count_antinodes(&input);
    assert_eq!(count, 4);
}

#[test]
fn can_count_antinodes_3() {
    let input = 
"............
........0...
.....0......
.......0....
....0.......
......A.....
............
............
........A...
.........A..
............
............";
    let count = count_antinodes(&input);
    assert_eq!(count, 14);
}

/*
......#....#          ............
...#....0...          ........0...
....#0....#.          .....0......
..#....0....          .......0....
....0....#..          ....0.......
.#....A.....          ......A.....
...#........          ............
#......#....          ............
........A...          ........A...
.........A..          .........A..
..........#.          ............
..........#.          ............
*/

#[test]
fn can_subtract_usize() {
  let size1: i64 = 1;
  let size2: i64 = 2;
  assert_eq!(size2 - size1 , -1)
}


#[test]
fn can_count_resonant_antinodes() {
    let input = 
"T.........
...T......
.T........
..........
..........
..........
..........
..........
..........
..........";
    let count = count_resonant_antinodes(&input);
    assert_eq!(count, 9);
}

#[test]
fn can_count_resonant_antinodes_1_5() {
    let input = 
"T.........
...T......
..........
..........
..........
..........
..........
..........
..........
..........";
    let count = count_resonant_antinodes(&input);
    assert_eq!(count, 4);
}


#[test]
fn can_count_resonant_antinodes_2() {
    let input = 
"............
........0...
.....0......
.......0....
....0.......
......A.....
............
............
........A...
.........A..
............
............";
    let count = count_resonant_antinodes(&input);
    assert_eq!(count, 34);
}

#[test]
fn can_count_resonant_antinodes_3() {
    let input = 
"............
............
.....0......
.......0....
............
............
............
............
............
............
............
............";
    let count = count_resonant_antinodes(&input);
    assert_eq!(count, 6);
}
